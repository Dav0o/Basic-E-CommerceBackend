// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231025034146_initialmigration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.ProductCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("double");

                    b.Property<string>("ProductoId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductsCart");
                });

            modelBuilder.Entity("Domain.Producto", b =>
                {
                    b.Property<string>("productId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("productPrice")
                        .HasColumnType("double");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.HasKey("productId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Domain.ShoppingCart", b =>
                {
                    b.Property<string>("cartId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("customerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("subTotal")
                        .HasColumnType("double");

                    b.Property<double>("total")
                        .HasColumnType("double");

                    b.HasKey("cartId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Domain.ProductCart", b =>
                {
                    b.HasOne("Domain.ShoppingCart", "ShoppingCart")
                        .WithMany("ProductCarts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Producto", "Producto")
                        .WithMany("ProductsCart")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Domain.Producto", b =>
                {
                    b.Navigation("ProductsCart");
                });

            modelBuilder.Entity("Domain.ShoppingCart", b =>
                {
                    b.Navigation("ProductCarts");
                });
#pragma warning restore 612, 618
        }
    }
}
